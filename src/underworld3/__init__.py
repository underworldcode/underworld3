"""## Underworld3 Python package

`Underworld3` is a finite element, particle-in-cell geodynamics code that produces
mathematically self-describing models through an interface with `sympy` Underworld3 builds upon the `PETSc`
parallel finite element and solver package, using their `petsc4py` library.

A common pattern for building `underworld3` models is to develop python scripts in notebook-friendly form
(e.g. with `jupytext`) which are thoroughly documented through markdown descriptions. `underworld` objects
are similarly documented so that their underlying algorithmic and mathemcical structure can be examined in
a notebook.

`python` scripts built this way will also be compatible with `mpirun` for parallel execution.

## Documentation

The underworld documentation is in two parts: the user manual / theory manual is a hand-written document that is built from this repository automatically
from the sources in the `Jupyterbook` directory. This api documentation is autogenerated from the code and its annotations. There are two version of
each documentation package that are published online. The main (stable) branch

- https://underworldcode.github.io/underworld3/main/index.html
- https://underworldcode.github.io/underworld3/main_api/underworld3/index.html

The development branch has similar documentation:

- https://underworldcode.github.io/underworld3/development/index.html
- https://underworldcode.github.io/underworld3/development_api/underworld3/index.html


## Building / installation

Refer to the Dockerfile for uw3 build instructions.

To install from the repository
```shell
./compile.sh
```

An in-place installation may be helpful for developers (as distinct from above)
(`compile.sh` is a convenience wrapper to `pip install`)

```shell
pip install -e . --no-build-isolation
```

To clean the git repository or all files ... be careful.
```shell
./clean.sh
```

## Testing and documentation

Run the `pytest` testing suite with
```shell
./test.sh
```

This API documentation is build with
```shell
./docs.sh
```
Open `uw3_api_docs/index.html` to browse.

## To uninstall

```shell
pip uninstall underworld3
```

"""

from mpi4py import MPI  # for initialising MPI
import petsc4py as _petsc4py
import sys

_petsc4py.init(sys.argv)

from petsc4py import PETSc

# pop the default petsc Signal handler to let petsc errors appear in python
# unclear if this is the appropriate way see discussion
# https://gitlab.com/petsc/petsc/-/issues/1066

PETSc.Sys.popErrorHandler()

try:
    from ._version import __version__
except ImportError:
    __version__ = "Unknown"  # check src/underworld3/_version.py


def view():
    from IPython.display import Latex, Markdown, display
    from textwrap import dedent
    import inspect

    ## Docstring (static)
    docstring = dedent(__doc__)
    # docstring = docstring.replace("$", "$").replace("$", "$")
    display(Markdown(docstring))

    return


# PETSc.Log().begin()

# Bundle these utils
# Needed everywhere
import underworld3.mpi
from ._var_types import *
from .utilities._petsc_tools import *
from .utilities._nb_tools import *
from .utilities._utils import auditor

from .utilities import _api_tools

# from underworld3.utilities import _api_tools
from .utilities._utils import auditor

import underworld3.adaptivity
import underworld3.coordinates
import underworld3.discretisation
import underworld3.meshing
import underworld3.constitutive_models
import underworld3.maths
import underworld3.swarm
import underworld3.systems
import underworld3.maths
import underworld3.utilities
import underworld3.kdtree
import underworld3.ckdtree
import underworld3.cython
import underworld3.scaling
import underworld3.visualisation
import numpy as _np

# get the id for this installation of uw, if not there, create it
try:
    from ._uwid import uwid as _id
except:
    import uuid as _uuid

    _id = str(_uuid.uuid4())

###########################################
####### For User telemetry metrics ########

# setup metrics function *only* if we are rank==0.
# Metric can be disables by setting UW_NO_USAGE_METRICS env var.
# TODO: confirm not other condition like tests?
if underworld3.mpi.rank == 0:

    def _sendData():

        import os

        # disable collection of data if requested
        if "UW_NO_USAGE_METRICS" not in os.environ:
            # get platform info
            import platform

            sysinfo = platform.system()
            sysinfo += "__" + platform.machine()
            # check if docker
            if os.path.isfile("/.dockerinit"):
                sysinfo += "__docker"

            event_dict = {
                "properties": {
                    "version": underworld3.__version__,
                    "platform": sysinfo,
                    "run_size": underworld3.mpi.size,
                    "distinct_id": _id,
                }
            }

            # send info async
            import threading

            thread = threading.Thread(
                target=underworld3.utilities._utils.postHog,
                args=("import_uw3", event_dict),
            )
            thread.daemon = True
            thread.start()

    try:
        _sendData()
    except:  # continue quietly if something above failed
        pass
####### END User telemetry metrics ########

# Info for JIT modules.
# These dicts should be populated by submodules
# which define cython/c based classes.
# We use ordered dictionaries because the
# ordering can be important when linking in libraries.
# Note that actually what we want is an ordered set (which Python
# doesn't natively provide). Hence for the key/value pair,
# the value is always set to `None`.

from collections import OrderedDict as _OD

_libfiles = _OD()
_libdirs = _OD()
_incdirs = _OD({_np.get_include(): None})

## -------------------------------------------------------------

# pdoc3 over-rides. pdoc3 has a strange path-traversal algorithm
# that seems to have trouble finding modules if we move this
# dictionary to any other location in the underworld3 tree

__pdoc__ = {}

# Cython files cannot be documented. We should move pure
# python out of these files if we can

__pdoc__["cython"] = False
# __pdoc__["function.analytic"] = False

# Here we nuke some of the placeholders in the parent class so that they do not mask the
# child class modifications

__pdoc__["systems.constitutive_models.Constitutive_Model.Parameters"] = False
